package d6_map_api;

import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

/**
      Map集合是双列集合的祖宗接口，它的功能是全部双列集合都可以继承使用的
      目标：Map集合的常用API(重点中的重点)
        - public V put(K key, V value):  把指定的键与指定的值添加到Map集合中。
        - public V remove(Object key): 把指定的键 所对应的键值对元素 在Map集合中删除，返回被删除元素的值。
        - public void clear(): 移除所有的键值对元素。
        - public boolean isEmpty(): 判断集合是否为空。
        - public int size(): 集合的长度，也就是集合中键值对的个数。
        - public V get(Object key): 根据指定的键，在Map集合中获取对应的值。
        - public Set<K> keySet(): 获取Map集合中所有的键，存储到Set集合中。
        - public Set<Map.Entry<K,V>> entrySet(): 获取到Map集合中所有的键值对对象的集合(Set集合)。
        - public boolean containKey(Object key):判断该集合中是否有此键。
        - public boolean containValue(Object value):判断该集合中是否有此值。
 */
public class MapDemo {
    public static void main(String[] args) {
        // 1. 添加元素：无序 不重复 无索引
        Map<String,Integer> maps = new HashMap<>();
        maps.put("iphoneX",10);
        maps.put("娃娃",20);
        maps.put("iphoneX",100); // Map集合后面重复的键对应的元素会覆盖前面重复的整个元素！
        maps.put("huawei",100);
        maps.put("生活用品",10);
        maps.put("手表",10);
        // {huawei=100, 手表=10, 生活用品=10, iphoneX=100, 娃娃=20}
        System.out.println(maps);

        // 2. 清空集合
        // maps.clear();
        // System.out.println(maps);

        // 3. 判断集合是否为空，为空返回true，反之返回false。
        System.out.println(maps.isEmpty());

        // 4. 根据键获取对应值: public V get(Object key)
        Integer key = maps.get("huawei");
        System.out.println(key); // 100
        System.out.println(maps.get("生活用品")); // 10
        System.out.println(maps.get("生活用品2")); // null

        // 5. 根据键删除整个元素 (删除键会返回键的值)
        System.out.println(maps.remove("iphoneX")); // 100
        System.out.println(maps);

        // 6. 判断是否包含某个键，包含返回true，反之返回false
        System.out.println(maps.containsKey("娃娃")); // true
        System.out.println(maps.containsKey("娃娃2")); // false
        System.out.println(maps.containsKey("iphoneX")); // false

        // 7. 判断是否包含某个值
        System.out.println(maps.containsValue(100)); // true
        System.out.println(maps.containsValue(10)); // true
        System.out.println(maps.containsValue(22)); // false

        // {huawei=100, 手表=10, 生活用品=10, 娃娃=20}
        // 8. 获取全部键的集合：public Set<K> keySet()
        Set<String> keys = maps.keySet();
        System.out.println(keys);

        System.out.println("----------------------------");
        // 9. 获取全部值的集合：Collection<V> values()
        Collection<Integer> values = maps.values();
        System.out.println(values);

        // 10. 集合的大小
        System.out.println(maps.size()); // 4

        // 11. 合并其他Map集合
        Map<String,Integer> map1 = new HashMap<>();
        map1.put("java1",1);
        map1.put("java2",100);
        Map<String,Integer> map2 = new HashMap<>();
        map2.put("java2",1);
        map2.put("java3",100);
        map1.putAll(map2); // 把集合map2的元素拷贝一份到map1中去
        System.out.println(map1);
        System.out.println(map2);
    }
}
